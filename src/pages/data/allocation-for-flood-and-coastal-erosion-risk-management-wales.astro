---
import Layout from "../../layouts/Layout.astro";
import datasetData from "../../data/datasets/allocation-for-flood-and-coastal-erosion-risk-management-wales.json";
---

<Layout title={ datasetData.about.title } caption="Dataset">

    <p class="about-summary">
        Published by 
        <a href={ datasetData.about.publisher.url }>{ datasetData.about.publisher.name }</a>
        at { datasetData.about.contentModified }
        in the <a href="#">{ datasetData.about.theme }</a> theme
        available under the <a href={ datasetData.about.licence.url }>{ datasetData.about.licence.name }</a> licence
    </p>

    <p class="dataset-description">{ datasetData.about.description }</p>

    <ul class="dataset-tabs">
        <li id="data-table" class="tab active">Data</li>
        <li id="visualisation" class="tab">Visualisation</li>
        <li id="about" class="tab">About</li>
        <li id="versions" class="tab">Versions</li>
    </ul>

    <div class="layout">
        <aside>
            <h1>Refine Results</h1>

            <div class="filter-section">
                <div class="select-list field">
                    <label for="sort-order">Sort</label>
                    <select id="sort-order">
                        <option value="default">Default sorting</option>
                        { datasetData.structure.map((column) => (
                            <option value={ column.id }>{ column.name }</option>
                        ))}
                    </select>
                </div>
            </div>
        </aside>
        <main>
            <section id="data-table-content" class="data-table tab-content">
                <h1>{ datasetData.data.length } observations</h1>

                <table class="dataset-data-table">
                    <thead>
                        <tr>
                            { datasetData.structure.map((column) => (
                                <th class={column.type}>{ column.name }</th>
                            ))}
                        </tr>
                    </thead>
                    <tbody id="data-table-body">
                        { datasetData.data.map((dataset) => (
                            <tr>
                                { datasetData.structure.map((column) => (
                                    <td class={column.type}><span class="cell-placeholder"></span></td>
                                ))}
                            </tr>
                        ))}
                    </tbody>
                </table>
            </section>
            <section id="visualisation-content" class="visualisation tab-content hidden">
                <div class="visualisation-container">
                    <canvas id="chart-canvas"></canvas>
                </div>
            </section>
        </main>
    </div>
</Layout>

<style>
    .layout {
        display: grid;
        grid-template-columns: 1fr 2fr;
        gap: 40px;
        padding-top: 40px;
    }

    aside h1,
    main h1 {
        font-size: 24px;
        line-height: 32px;
        margin: 0;
    }

    main h1 {
        margin-bottom: 64px;
    }

    .filter-section {
        padding: 32px 0;
        border-bottom: 1px solid var(--color-border);
    }

    .filter-section h2 {
        font-family: "Figtree", sans-serif;
        font-size: 19px;
        font-weight: 600;
        margin: 0 0 16px;
    }

    :global(.filter-section .checkbox-item) {
        margin-bottom: 16px;
    }

    :global(.filter-section .checkbox-item:last-child) {
        margin-bottom: 0;
    }

    :global(main .dataset-summary:first-of-type) {
        padding-top: 0;
    }

    :global(main .dataset-summary:last-of-type) {
        padding-bottom: 0;
        border-bottom: 0;
    }

    .about-summary {
        font-size: 16px;
        color: var(--color-secondary-text);
        margin: 32px 0 40px;
    }

    .dataset-tabs {
        list-style: none;
        margin: 0;
        padding: 0;
        width: 100%;
        border-bottom: 1px solid var(--color-border);
        display: flex;
        gap: 40px;
    }

    .dataset-tabs li.active {
        border-bottom: 4px solid var(--color-purple);
        color: var(--color-purple);
        
    }

    .dataset-tabs li {
        font-weight: 700;
        color: var(--color-secondary-text);
        padding: 16px 0;
        cursor: pointer;
    }

    .dataset-tabs li:not(.active):hover {
        color: var(--color-black);
        border-bottom: 1px solid var(--color-black);
    }

    .dataset-description {
        margin-bottom: 40px;
    }

    .visualisation-container {
        /* width: 100%; */
    }

    .hidden {
        display: none;
    }

    @keyframes cell-placeholder {
        0% { background-position: 100% 0 }
        100% { background-position: -100% 0 }
    }
</style>

<script>
    import Chart from 'chart.js/auto';
    import datasetData from "../../data/datasets/allocation-for-flood-and-coastal-erosion-risk-management-wales.json";

    const tabs = document.querySelectorAll('.tab');
    const tabContent = document.querySelectorAll('.tab-content');
    const dataTableBody = document.getElementById('data-table-body');
    const sortOrder = document.getElementById('sort-order');
    const originalSortOrdering = datasetData.data;
    const chartContainer = document.getElementById('chart-canvas') as HTMLCanvasElement;

    function renderDataTable(sortOrder) {
        var tableHtml = ``;

        var sortedData;
        sortedData = (sortOrder.value == "default" ? originalSortOrdering : changeSortOrder(sortOrder));

        dataTableBody.innerHTML = "";

        console.log(sortedData)

        sortedData.map(row => {
            tableHtml = tableHtml + `<tr>`;
            datasetData.structure.map(column => {
                tableHtml = tableHtml + `<td class="${ column.type }">${ row[column.id] }</td>`
            });
            tableHtml = tableHtml + `</tr>`;
        });

        dataTableBody.innerHTML = tableHtml;
    }

    function renderChart(sortOrder) {
        var sortedData;
        sortedData = (sortOrder.value == "default" ? originalSortOrdering : changeSortOrder(sortOrder));

        const data = sortedData;

        var chartStatus = Chart.getChart("chart-canvas");
        if (chartStatus != undefined) {
            chartStatus.destroy();
        }

        new Chart(
            chartContainer,
            {
                type: 'line',
                data: {
                    labels: data.map(row => row.period),
                    datasets: [
                        {
                            label: 'Period',
                            data: data.map(row => row.allocatedSpending)
                        }
                    ]
                },
                options: {
                    responsive: true
                }
            }
        );
    }

    sortOrder.addEventListener("change", (e) => {
        console.log(`Sort order (onChange Event Listener): ${e.target.value}`);
        renderDataTable(e.target.value);
        renderChart(e.target.value);
    });

    function changeSortOrder(column) {
        var sortedData = datasetData.data;
        sortedData = sortedData.sort((a, b) => {
            if (a[column] < b[column]) {
                return -1;
            }
        });

        return sortedData;
    }

    tabs.forEach(tab => {
        tab.addEventListener('click', (e) => {
            switchTabs(e.target.id);
        });
    });

    function switchTabs(id) {
        console.log(id);
        tabs.forEach(tab => { tab.classList.remove("active") });
        document.getElementById(id).classList.add("active");
        tabContent.forEach(content => { content.classList.add("hidden") });
        document.getElementById(id + "-content").classList.remove("hidden");
    }

    (async function() {
        renderDataTable("default");
    })();

    (async function() {
        renderChart("default");
    })();
</script>